library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;

entity count3_up_down is
    port( 
        clk: in std_logic;
        resetn: in std_logic;
        count_en : in std_logic;
        up_down : in std_logic;
        sum : out std_logic_vector(2 downto 0);
        cout : out std_logic
        );
end count3_up_down;

architecture rtl of count3_up_down is
    signal count: std_logic_vector(2 downto 0):= "000";

begin
    process(clk, resetn)
    begin
        if resetn='0' then
            -- Î?Ï?Î´Î¹ÎºÎ±Ï‚ Î³Î¹Î± Ï„Î·Î½ Ï€ÎµÏ?Î¯Ï€Ï„Ï‰ÏƒÎ· Ï„Î¿Ï… reset (ÎµÎ½ÎµÏ?Î³Ï? Ï‡Î±Î¼Î·Î»Î¬)
            count <= (others=>'0');
        elsif clk'event and clk='1' then
            -- Î§Ï?Î®ÏƒÎ· case Î³Î¹Î± Ï€ÎµÏ?Î¯Ï€Ï„Ï‰ÏƒÎ· up/down
            case(up_down) is
                when '1' =>
                    if count_en='1' then
                    -- Î?Î­Ï„Ï?Î·ÏƒÎ· Î¼Ï?Î½Î¿ Î±Î½ count_en = 1
                        count<=count+1;
                    end if;
                when others =>
                    if count_en='1' then
                    -- Î?Î­Ï„Ï?Î·ÏƒÎ· Î¼Ï?Î½Î¿ Î±Î½ count_en = 1
                        count<=count-1;
                    end if;  
            end case;                    
        end if;
    end process;
    -- Î‘Î½Î¬Î¸ÎµÏƒÎ· Ï„Î¹Î¼Ï?Î½ ÏƒÏ„Î± ÏƒÎ®Î¼Î±Ï„Î± ÎµÎ¾Ï?Î´Î¿Ï…

    sum <= count;
    cout <= '1' when count=7 and count_en='1' else '0';
end rtl;
